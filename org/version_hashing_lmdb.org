#+TITLE: Stale document DO_NOT_USE!!!
#+AUTHOR: 
#+DATE: [2024-07-09 Tue]

* Introduction

This document contains the revised implementation of a Version Hashing System using LMDB as the storage backend.

* Imports and Structs

#+BEGIN_SRC rust :tangle yes
use lmdb::{Environment, Database, DatabaseFlags, WriteFlags, Transaction, Error as LmdbError};
use serde::{Serialize, Deserialize};
use bincode;

#[derive(Serialize, Deserialize, Debug, Clone)]
struct BranchInfo {
    branch_name: String,
    current_hash: String,
    parent_branch: String,
    parent_hash: String,
    parent_version: u64,
}

struct VersionHasher {
    env: Environment,
    db: Database,
}
#+END_SRC

* VersionHasher Implementation

** New Function
#+BEGIN_SRC rust :tangle yes
impl VersionHasher {
    fn new(path: &str) -> Result<Self, LmdbError> {
        let env = Environment::new()
            .set_map_size(10 * 1024 * 1024) // 10MB
            .open(path)?;
        let db = env.create_db(None, DatabaseFlags::empty())?;
        
        let mut hasher = VersionHasher { env, db };
        
        // Initialize main branch if it doesn't exist
        if !hasher.branch_exists("main")? {
            hasher.insert_branch("main", BranchInfo {
                branch_name: "main".to_string(),
                current_hash: String::new(),
                parent_branch: String::new(),
                parent_hash: String::new(),
                parent_version: 0,
            })?;
        }
        
        Ok(hasher)
    }
}
#+END_SRC

** Branch Exists Function
#+BEGIN_SRC rust :tangle yes
impl VersionHasher {
    fn branch_exists(&self, branch: &str) -> Result<bool, LmdbError> {
        let txn = self.env.begin_ro_txn()?;
        let exists = txn.get(self.db, &branch.to_string()).is_ok();
        txn.commit()?;
        Ok(exists)
    }
}
#+END_SRC

** Insert Branch Function
#+BEGIN_SRC rust :tangle yes
impl VersionHasher {
    fn insert_branch(&mut self, branch: &str, info: BranchInfo) -> Result<(), LmdbError> {
        let mut txn = self.env.begin_rw_txn()?;
        txn.put(self.db, &branch.to_string(), &bincode::serialize(&info).unwrap(), WriteFlags::empty())?;
        txn.commit()?;
        Ok(())
    }
}
#+END_SRC

** Get Branch Info Function
#+BEGIN_SRC rust :tangle yes
impl VersionHasher {
    fn get_branch_info(&self, branch: &str) -> Result<Option<BranchInfo>, LmdbError> {
        let txn = self.env.begin_ro_txn()?;
        let result = txn.get(self.db, &branch.to_string())
            .map(|bytes| bincode::deserialize(bytes).unwrap());
        txn.commit()?;
        Ok(result.ok())
    }
}
#+END_SRC

** Create New Branch Function
#+BEGIN_SRC rust :tangle yes
impl VersionHasher {
    fn create_new_branch(&mut self, branch: &str, parent_branch: &str, parent_hash: String, parent_version: u64) -> Result<(), LmdbError> {
        let info = BranchInfo {
            branch_name: branch.to_string(),
            current_hash: String::new(),
            parent_branch: parent_branch.to_string(),
            parent_hash,
            parent_version,
        };
        self.insert_branch(branch, info)
    }
}
#+END_SRC

** Trace to Main Function (Revised)
#+BEGIN_SRC rust :tangle yes
impl VersionHasher {
    fn trace_to_main(&self, start_branch: &str) -> Result<Vec<BranchInfo>, LmdbError> {
        let mut branch_path = Vec::new();
        let mut current_branch = start_branch.to_string();
        
        while current_branch != "main" {
            if let Some(info) = self.get_branch_info(&current_branch)? {
                branch_path.push(info.clone());
                current_branch = info.parent_branch;
            } else {
                return Err(LmdbError::NotFound);
            }
        }
        
        // Add the main branch info
        if let Some(main_info) = self.get_branch_info("main")? {
            branch_path.push(main_info);
        }
        
        branch_path.reverse();
        Ok(branch_path)
    }
}
#+END_SRC

* Main Function (Not Tangled)

#+BEGIN_SRC rust
fn main() -> Result<(), LmdbError> {
    let mut hasher = VersionHasher::new("./version_db")?;

    // Example usage
    hasher.create_new_branch("kinetic", "main", "hash1".to_string(), 1)?;
    hasher.create_new_branch("lunar", "kinetic", "hash2".to_string(), 1)?;
    hasher.create_new_branch("mantic", "lunar", "hash3".to_string(), 1)?;

    let branch_path = hasher.trace_to_main("mantic")?;
    for info in branch_path {
        println!("Branch: {}, Current Hash: {}, Parent: {}", info.branch_name, info.current_hash, info.parent_branch);
    }

    Ok(())
}
#+END_SRC

* Conclusion

This implementation uses LMDB as a persistent storage solution for the version hashing system. The ~trace_to_main~ function returns a vector of ~BranchInfo~, providing comprehensive information about each branch in the path from the given branch to the main branch.

To use this code, ensure you have the following dependencies in your ~Cargo.toml~:

#+BEGIN_SRC toml
[dependencies]
lmdb = "0.8"
bincode = "1.3"
serde = { version = "1.0", features = ["derive"] }
#+END_SRC

This revised implementation provides a robust and correct solution for managing version hashes and branch information using LMDB, with the ability to trace the branch hierarchy efficiently and return detailed information about each branch in the path.
